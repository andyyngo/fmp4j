import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java-library'
    id 'java-test-fixtures'
    id 'checkstyle'
    id 'jacoco'
    id 'com.vanniktech.maven.publish' version '0.34.0'
    id 'com.diffplug.spotless' version '7.2.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

apply plugin: dev.sorn.fmp4j.CoveragePlugin

group = 'dev.sorn.fmp4j'
version = projectVersion

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("org.apache.httpcomponents.client5:httpclient5:${apacheHttpComponentsVersion}")
    implementation("org.apache.commons:commons-lang3:${apacheCommonsVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoCoreVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoJunitVersion}")
    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.junit.platform:junit-platform-suite-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    "${buildDir}/generated-sources"
            ]
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed", "skipped"
        exceptionFormat "full"
        showStandardStreams = true
        showStackTraces = true
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            def GREEN = "\u001B[32m"
            def RED = "\u001B[31m"
            def YELLOW = "\u001B[33m"
            def RESET = "\u001B[0m"
            println """
${result.resultType == TestResult.ResultType.SUCCESS ? GREEN : RED}Results: ${result.resultType}${RESET}
(${GREEN}${result.successfulTestCount} passed${RESET}, ${RED}${result.failedTestCount} failed${RESET}, ${YELLOW}${result.skippedTestCount} skipped${RESET}, ${result.testCount} total)
"""
        }
    }
}

tasks.named('check') {
    finalizedBy jacocoTestReport
}

tasks.withType(Jar).configureEach {
    manifest.attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': project.group
    )
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

spotless {
    java {
        palantirJavaFormat()
        target 'src/**/*.java'
    }
}

checkstyle {
    toolVersion = checkstyleVersion
    configDirectory = file("${rootDir}/config/checkstyle")
    ignoreFailures = false
    maxWarnings = 0
}

check.dependsOn tasks.checkstyleMain, tasks.checkstyleTest

tasks.withType(Checkstyle).configureEach {
    exclude '**/generated-sources/**'
    exclude '**/generated/**'
    exclude '**/module-info.java'
}

tasks.named('checkstyleMain') {
    dependsOn tasks.named('spotlessApply')
}

tasks.named('checkstyleTest') {
    dependsOn tasks.named('spotlessApply')
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
    executionData fileTree(layout.buildDirectory) {
        include 'jacoco/*.exec'
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'dev/sorn/fmp4j/generated/**'
                    ])
                })
        )
    }
}

clean {
    delete "${buildDir}/generated-sources"
}

tasks.withType(Javadoc).configureEach {
    exclude fileTree("${buildDir}/generated-sources/**")
    options.addStringOption('Xdoclint:none', '-quiet')
}

afterEvaluate {
    tasks.named('generateMetadataFileForMavenPublication') {
        dependsOn(tasks.named('plainJavadocJar'))
    }
}

tasks.register('fatJar', ShadowJar) {
    archiveClassifier.set('all')
    configurations = [project.configurations.runtimeClasspath]
    from sourceSets.main.output
}

def pythonDir = "$projectDir/python"
def venvDir = "$buildDir/venv"
def pipPath = "${venvDir}/bin/pip"
def pythonPath = "${venvDir}/bin/python"
def pytestPath = "${venvDir}/bin/pytest"
def jarPath = "$buildDir/libs/${project.name}-${project.version}-all.jar"

tasks.register('createVirtualEnv', Exec) {
    description = "Create Python virtual environment"
    outputs.dir venvDir
    commandLine 'python3', '-m', 'venv', venvDir
    onlyIf { !file(pythonPath).exists() }
}

tasks.register('installPythonDependencies', Exec) {
    description = "Install Python dependencies using pip"
    dependsOn 'createVirtualEnv'
    workingDir pythonDir
    commandLine pipPath, 'install', '-r', 'requirements.txt'
}

tasks.register('generatePythonStubs', Exec) {
    group = 'Code Generation'
    description = 'Generates Python type stubs for Java classes'
    dependsOn 'fatJar', 'installPythonDependencies'

    def javaHome = javaToolchains.launcherFor(java.toolchain).get().metadata.installationPath.asFile.absolutePath

    def jvmPath
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        jvmPath = "${javaHome}/lib/libjli.dylib" // macOS
    } else {
        jvmPath = "notsupported" // Windows
    }

    def fatJarTask = tasks.named('fatJar', ShadowJar).get()
    def generatedJarPath = fatJarTask.archiveFile.get().asFile.absolutePath
    commandLine pythonPath, '-m', 'stubgenj',
            '--jvmpath', jvmPath,
            '--classpath', generatedJarPath,
            '--output-dir', "${projectDir}/python/typings",
            "--no-stubs-suffix",
            'dev.sorn.fmp4j'

    doFirst {
        file("${projectDir}/python/typings").mkdirs()
        println "Using JVM Path: ${jvmPath}"
        println "Using JAR: ${generatedJarPath}"
        println "Generating Python stubs for package: dev.sorn.fmp4j"
        if (!file(jvmPath).exists()) {
            throw new GradleException("JVM library not found at: ${jvmPath}. Please check your Java installation.")
        }
    }
}

tasks.register('runPythonTests', Exec) {
    description = "Run Python tests with pytest"
    dependsOn 'generatePythonStubs', 'installPythonDependencies'
    def fatJarTask = tasks.named('fatJar', ShadowJar).get()
    def testJarPath = fatJarTask.archiveFile.get().asFile.absolutePath
    workingDir pythonDir
    environment "FMP_JAR_PATH", testJarPath
    environment "PYTHONPATH", "${pythonDir}:${venvDir}/lib/python3.13/site-packages"
    commandLine pytestPath, '-s', '-p', 'no:faulthandler', '--maxfail=1', 'tests'
    doFirst {
        println "PYTHONPATH: ${environment['PYTHONPATH']}"
        println "JAR path: ${testJarPath}"
    }
}